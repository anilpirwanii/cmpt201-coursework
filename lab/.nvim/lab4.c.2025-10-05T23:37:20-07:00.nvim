#include <unistd.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>

#define HEAP_INCREASE 256
#define NUM_BLOCKS 2
#define BLOCK_SIZE (HEAP_INCREASE / NUM_BLOCKS)
#define BUF_SIZE 1024

struct header {
    uint64_t size;
    struct header* next;
};

void handle_error(const char* msg) {
    perror(msg);
}

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                          data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                        : *(void **)data);
  if (len < 0) {
    handle_error("snprintf");
    return;
  }
  if (write(STDOUT_FILENO, buf, len) < 0) {
    handle_error("write");
  }
}

int main() {
    void* heap_start = sbrk(HEAP_INCREASE);
    if (heap_start == (void*)-1) {
        handle_error("sbrk failed to allocate memory");
        return 1;
    }

    struct header* block1 = (struct header*)heap_start;
    struct header* block2 = (struct header*)((char*)heap_start + BLOCK_SIZE);

    block1->size = BLOCK_SIZE;
    block1->next = NULL;

    block2->size = BLOCK_SIZE;
    block2->next = block1;

    size_t header_size = sizeof(struct header);
    size_t data_size = BLOCK_SIZE - header_size;

    void* block1_data_start = (char*)block1 + header_size;
    memset(block1_data_start, 0, data_size);

    void* block2_data_start = (char*)block2 + header_size;
    memset(block2_data_start, 1, data_size);
    
    print_out("first block:       %p\n", &block1, sizeof(block1));
    print_out("second block:      %p\n", &block2, sizeof(block2));
    
    print_out("first block size:  %ld\n", &block1->size, sizeof(block1->size));
    print_out("first block next:  %p\n", &block1->next, sizeof(block1->next));
    print_out("second block size: %ld\n", &block2->size, sizeof(block2->size));
    print_out("second block next: %p\n", &block2->next, sizeof(block2->next));

    unsigned char* data1_ptr = (unsigned char*)block1_data_start;
    for (size_t i = 0; i < data_size; i++) {
        uint64_t val = data1_ptr[i];
        print_out("%ld\n", &val, sizeof(val));
    }

    unsigned char* data2_ptr = (unsigned char*)block2_data_start;
    for (size_t i = 0; i < data_size; i++) {
        uint64_t val = data2_ptr[i];
        print_out("%ld\n", &val, sizeof(val));
    }

    return 0;
}
